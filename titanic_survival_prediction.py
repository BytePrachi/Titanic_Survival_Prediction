# -*- coding: utf-8 -*-
"""Titanic_Survival_Prediction

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17FBKGu3Lsngf2FLZyJnM9QDKXu1b5N5m

# **Importing the dependencies**
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""# **Data Collection & Processing**

"""

# load the data from csv file to pandas dataframe
titanic_data = pd.read_csv('/content/train (1).csv')

# printing the first 5 rows of the dataframe
titanic_data.head()

titanic_data.shape

titanic_data.info()

titanic_data.isnull().sum()

# drop the 'Cabin' column from the dataframe
titanic_data = titanic_data.drop(columns= 'Cabin',axis=1)

titanic_data['Age'].fillna(titanic_data['Age'].mean(), inplace= True)

print(titanic_data['Embarked'].mode())

titanic_data['Embarked'].fillna(titanic_data['Embarked'].mode()[0], inplace= True)

titanic_data.isnull().sum()

"""# **Data Analysis**"""

# getting some statistical measures about the data
titanic_data.describe()

# finding the no. of people survived and not survived
titanic_data['Survived'].value_counts()

"""# **Data Visualization**"""

sns.set()

"""### We do this only for numeric discrete data and for string categorical data

*   **For Survived**
"""

# making a count plot for "Survived" column
sns.countplot('Survived', data= titanic_data)

"""*   **For Sex**




"""

# finding the no. of male & female
titanic_data['Sex'].value_counts()

# making a count plot for "Sex" column
sns.countplot('Sex', data= titanic_data)

"""*   **For Survivors gender wise**




"""

# no. of survivors gender wise
sns.countplot('Sex', hue='Survived', data= titanic_data)

"""*   **For Pclass**




"""

# finding the no. of Upper, middle and lower class
titanic_data['Pclass'].value_counts()

# making a count plot for "Pclass" column
sns.countplot('Pclass', data= titanic_data)

"""*   **For Survivors Pclass wise**"""

# no. of survivors Pclass wise
sns.countplot('Pclass', hue='Survived', data= titanic_data)

"""*   **For SibSp**"""

# finding the no. of brother, sister, stepbrother, stepsister and husband, wife (mistresses and fianc√©s were ignored)
titanic_data['SibSp'].value_counts()

# making a clount plot for 'SibSp' column
sns.countplot('SibSp', data= titanic_data)

"""*   **For Survivors SibSp wise**"""

# no. of survivors 'SibSp' wise
sns.countplot('SibSp', hue= 'Survived', data= titanic_data)

"""*   **For Parch**"""

# finding the no. of mother, father and daughter, son, stepdaughter, stepson  Some children travelled only with a nanny, therefore parch=0 for them.
titanic_data['SibSp'].value_counts()

# making a count plot for 'Parch' column
sns.countplot('Parch', data=titanic_data)

"""*   **For Survivors Parch wise**"""

# no. of Survivors 'Parch' wise
sns.countplot('Parch', hue= 'Survived', data= titanic_data)

"""*   **For Embarked**"""

# finding the no. of 
titanic_data['Embarked'].value_counts()

"""# **Encoding the categorical columns**"""

titanic_data['Sex'].value_counts()

titanic_data['Embarked'].value_counts()

# converting the categorical columns
titanic_data.replace({'Sex':{'male':0, 'female':1}, 'Embarked':{'S': 0, 'C':1, 'Q':2}}, inplace= True)

titanic_data.head()

"""# **Separating Features & Target**"""

X= titanic_data.drop(columns= ['PassengerId','Survived', 'Name', 'Ticket'])
Y= titanic_data['Survived']

print(X)

print(Y)

"""# **Splitting the data into training data and testing data**"""

X_train, X_test, Y_train, Y_test= train_test_split(X, Y, test_size= 0.2, random_state= 2)

print(X.shape, X_train.shape, X_test.shape)

"""# **Model Training**

### **Logistic Regression** is statiscal model & it is useful for binary classification problem
"""

model= LogisticRegression()

# training the logistic regression model with training data
model.fit(X_train, Y_train)

"""# **Model Evaluation**

### **Accuracy Score**
"""

# accuracy on training data
X_train_prediction = model.predict(X_train)

print(X_train_prediction)

training_data_accuracy = accuracy_score(Y_train, X_train_prediction)
print('Accuracy score of training data :', training_data_accuracy)

# accuracy on test data
X_test_prediction = model.predict(X_test)

print(X_test_prediction)

test_data_accuracy = accuracy_score(Y_test, X_test_prediction)
print('Accuracy score of test data :', test_data_accuracy)

